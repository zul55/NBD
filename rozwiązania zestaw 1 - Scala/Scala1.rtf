{\rtf1\ansi\ansicpg1250\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Zad 1 - p\uc0\u281 tle\
\
val dniTygodnia = List("poniedzia\uc0\u322 ek","wtorek","\u347 roda","czwartek","pi\u261 tek","sobota","niedziela")\
\
\
for (dzien <- dniTygodnia) \{if (dzien == dniTygodnia.last) \{println(dzien)\} \
                            else \{print(dzien + ",")\}\}\
\
for (dzien <- dniTygodnia if dzien.startsWith("p")) print(dzien + ",")\
\
var i = 0\
val s = dniTygodnia.size\
while (i < s) \{\
  print(dniTygodnia(i) + ", ")\
  i += 1\
\}\
\
\
\
// Zad 2 - funkcje rekurencyjne\
\
def rekurencja1(i: Int): String = \{\
  if (i == dniTygodnia.length) return ""\
\
  val dzien = if (i == dniTygodnia.length - 1) dniTygodnia(i) else dniTygodnia(i) + ", "\
  dzien + rekurencja1(i + 1)\
    \}\
\
rekurencja1(0)\
\
def rekurencja2(i: Int): String = \{\
  if (i == -1) return ""\
  val dzien = if (i == 0) dniTygodnia(i) else dniTygodnia(i) + ", "\
  dzien + rekurencja2(i - 1)\
    \}\
\
rekurencja2(dniTygodnia.length - 1)\
\
\
\
// Zad 3 - rekurencja ogonowa\
\
def rekurencjaOgonowa(i: Int, string: String) : String = \{\
  if (i == dniTygodnia.length) return string\
\
  val dzien = if (i == dniTygodnia.length - 1) dniTygodnia(i) else dniTygodnia(i) + ", "\
  rekurencjaOgonowa(i + 1, string + dzien)\
    \}\
\
rekurencjaOgonowa(0, "")\
\
\
\
// Zad 4 - foldl, foldr, foldl dni rozpoczynaj\uc0\u261 cych si\u281  na "p"\
\
dniTygodnia.fold("") \{(sum, curr) => \{sum + curr + ", "\}\
                     \}.dropRight(2)\
\
dniTygodnia.foldRight("") \{(sum, curr) => \{sum + ", " + curr\}\
                            \}.dropRight(2)\
\
dniTygodnia.fold("") \{(sum, curr) => \{if (curr.startsWith("p")) \
                                        sum + curr + ", "\
                                        else sum\}\
                       \}.dropRight(2)\
\
\
// Zad 5 - mapa\
\
val gazetka = Map("jajka" -> 3, "mleko" -> 1, "wino" -> 15)\
\
val wyprzedaz = gazetka map \{ case (key, value) => (key, value * 0.9) \}\
println(wyprzedaz)\
\
\
// Zad 6 - krotka\
\
val krotka = ("Cukier" , 25, 0.6): Tuple3[String, Int, Double]\
println(krotka)\
\
\
\
// Zad 7 - option\
\
val mapa = Map("Warszawa" -> "Polska", \
                        "Pary\uc0\u380 " -> "Francja")\
  \
\
val x = mapa.get("Warszawa")\
val y = mapa.get("Rzym")\
  \
println(x)\
println(y)\
\
\
// Zad 8 \
\
 val numery = List(1, 0, 3, -3, 0, 8, 0, 9, 1, 1, 0)\
\
def iteracja(index: Int, lista: List[Int]): List[Int] = \{\
  if (index >= lista.length) return lista\
  val (czesc1, czesc2) = lista.splitAt(index)\
\
  if (lista(index) == 0)\
  iteracja(index + 1, czesc1 ++ czesc2.tail)\
  \
  else\
  iteracja(index + 1, lista)\
  \}\
\
iteracja(0, numery)\
\
\
// Zad 9 \
\
def funkcja(lista: List[Int]): List[Int] = \{\
  lista map (a => a + 1)\
  \
\}\
\
funkcja(numery)\
\
\
// Zad 10\
\
val zad10lista = List(-17.0, -3.5, -1.3, 0.0, 8.0, 6.9, 91)\
\
def wartBezwgledne (lista: List[Double]): List[Double] = \{\
  val filtrowanie = lista.filter (a => a >= -5 && a <= 12)\
  filtrowanie map(_.abs)\
  \
\}\
\
wartBezwgledne(zad10lista)\
\
\
\
}